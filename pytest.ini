[tool:pytest]
# Configuración global para todos los tests del proyecto
testpaths = 
    cli/tests
    core/tests
    test_*.py

# Patrones de archivos de test
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Opciones por defecto (sin coverage para evitar conflictos)
addopts = 
    -v
    --tb=short
    --strict-markers
    --disable-warnings
    --asyncio-mode=auto

# Marcadores para categorizar tests
markers =
    unit: Unit tests
    integration: Integration tests
    slow: Slow running tests
    auth: Authentication related tests
    display: Display utility tests
    input: Input helper tests
    session: Session manager tests
    commands: Command tests
    api: API related tests
    cli: CLI specific tests
    core: Core functionality tests
    homeassistant: Home Assistant integration tests

# Configuración de asyncio
asyncio_mode = auto

# Configuración de filtros de warnings
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:gql.transport.aiohttp
    ignore::RuntimeWarning:unittest.mock

# Configuración de timeout (requiere pytest-timeout)
timeout = 300

# Configuración de coverage
[coverage:run]
source = 
    cli
    core
    custom_components
omit = 
    */tests/*
    */venv/*
    */__pycache__/*
    */migrations/*
    setup.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod
